// <auto-generated />
using System;
using Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Infrastructure.Entities.BookmarkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Colour")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserBookId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserBookId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.FeedbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Communication")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionBook")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<bool>("Recommend")
                        .HasColumnType("boolean");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubSwapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubSwapId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", t =>
                        {
                            t.HasCheckConstraint("CK_Feedback_Stars", "\"Stars\" >= 1 AND \"Stars\" <= 5");
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.GeneralBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("Genres")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateOnly>("Published")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeneralBooks");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.IssueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubSwapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubSwapId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.MeetupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Location_X")
                        .HasColumnType("decimal(10,7)");

                    b.Property<float>("Location_Y")
                        .HasColumnType("decimal(10,7)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SuggestedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SwapId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SwapId");

                    b.HasIndex("UserId");

                    b.ToTable("Meetups");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Stars", "\"Rating\" >= 1 AND \"Rating\" <= 10");
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SocialMediaLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Platform")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMediaLinks");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SubSwapEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<int>("PageAt")
                        .HasColumnType("integer");

                    b.Property<Guid>("SwapId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserBookReadingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SwapId");

                    b.HasIndex("UserBookReadingId");

                    b.HasIndex("UserId");

                    b.ToTable("SubSwaps");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SwapEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubSwapAcceptingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubSwapRequestingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubSwapAcceptingId")
                        .IsUnique();

                    b.HasIndex("SubSwapRequestingId")
                        .IsUnique();

                    b.ToTable("Swaps");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.TimelineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SwapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SwapId");

                    b.HasIndex("UserId");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserBlockedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockedId");

                    b.HasIndex("BlockerId");

                    b.ToTable("UserBlockeds");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("GeneralBookEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<float>("Reputation")
                        .HasColumnType("decimal(4,3)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralBookEntityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reputation_Range", "\"Reputation\" >= 1 AND \"Reputation\" <= 5");
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserFollowingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollowings");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserWishlistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GeneralBookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GeneralBookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWishlists");
                });

            modelBuilder.Entity("Backend.Infrastructure.Views.GeneralBookWithAverageRating", b =>
                {
                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("GeneralBooksWithAverageRatings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.BookmarkEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserBookEntity", "UserBook")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserBook");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.FeedbackEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SubSwapEntity", "SubSwap")
                        .WithOne("Feedback")
                        .HasForeignKey("Backend.Infrastructure.Entities.FeedbackEntity", "SubSwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("SwapsFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubSwap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.IssueEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SubSwapEntity", "SubSwap")
                        .WithOne("Issue")
                        .HasForeignKey("Backend.Infrastructure.Entities.IssueEntity", "SubSwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("SwapsIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubSwap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.MeetupEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SwapEntity", "Swap")
                        .WithMany("Meetups")
                        .HasForeignKey("SwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Meetups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.ReviewEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.GeneralBookEntity", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SocialMediaLinkEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("SocialMediaLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SubSwapEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SwapEntity", "Swap")
                        .WithMany("SubSwaps")
                        .HasForeignKey("SwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserBookEntity", "UserBookReading")
                        .WithMany("SubSwaps")
                        .HasForeignKey("UserBookReadingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("SubSwaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swap");

                    b.Navigation("User");

                    b.Navigation("UserBookReading");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SwapEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SubSwapEntity", "SubSwapAccepting")
                        .WithOne()
                        .HasForeignKey("Backend.Infrastructure.Entities.SwapEntity", "SubSwapAcceptingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.SubSwapEntity", "SubSwapRequesting")
                        .WithOne()
                        .HasForeignKey("Backend.Infrastructure.Entities.SwapEntity", "SubSwapRequestingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSwapAccepting");

                    b.Navigation("SubSwapRequesting");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.TimelineEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.SwapEntity", "Swap")
                        .WithMany("TimelineUpdates")
                        .HasForeignKey("SwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("SwapsTimelineupdates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserBlockedEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "Blocker")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserBookEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.GeneralBookEntity", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.GeneralBookEntity", null)
                        .WithMany("WishlistedByUsers")
                        .HasForeignKey("GeneralBookEntityId");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserFollowingEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserWishlistEntity", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.GeneralBookEntity", "GeneralBook")
                        .WithMany()
                        .HasForeignKey("GeneralBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Wishlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneralBook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Backend.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.GeneralBookEntity", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserBooks");

                    b.Navigation("WishlistedByUsers");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SubSwapEntity", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.SwapEntity", b =>
                {
                    b.Navigation("Meetups");

                    b.Navigation("SubSwaps");

                    b.Navigation("TimelineUpdates");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserBookEntity", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("SubSwaps");
                });

            modelBuilder.Entity("Backend.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Meetups");

                    b.Navigation("Reviews");

                    b.Navigation("SocialMediaLinks");

                    b.Navigation("SubSwaps");

                    b.Navigation("SwapsFeedbacks");

                    b.Navigation("SwapsIssues");

                    b.Navigation("SwapsTimelineupdates");

                    b.Navigation("UserBooks");

                    b.Navigation("Wishlist");
                });
#pragma warning restore 612, 618
        }
    }
}
